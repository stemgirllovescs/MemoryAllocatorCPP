        -:    0:Source:test_Allocator.cpp
        -:    0:Graph:test_Allocator.gcno
        -:    0:Data:test_Allocator.gcda
        -:    0:Runs:1
        -:    1:// -----------------
        -:    2:// TestAllocator.cpp
        -:    3:// -----------------
        -:    4:
        -:    5:// https://github.com/google/googletest
        -:    6:// https://github.com/google/googletest/blob/master/docs/reference/assertions.md
        -:    7:
        -:    8:// --------
        -:    9:// includes
        -:   10:// --------
        -:   11:
        -:   12:#include <algorithm> // count
        -:   13:#include <cstddef>   // ptrdiff_t
        -:   14:#include <string>    // string
        -:   15:
        -:   16:#include "gtest/gtest.h"
        -:   17:
        -:   18:#include "Allocator.hpp"
        -:   19:
        -:   20:using namespace std;
        -:   21:
        -:   22:struct A {
        2:   23:    friend bool operator == (const A&, const A&) {
        2:   24:        A::log += "==(A, A) ";
        2:   25:        return true;}
        -:   26:
        -:   27:    static string log;
        -:   28:
        -:   29:    A  ()         = default;
        1:   30:    A  (int)      {log += "A(int) ";}
        2:   31:    A  (const A&) {log += "A(A) ";}
        3:   32:    ~A ()         {log += "~A() ";}};
        -:   33:
        -:   34:string A::log;
        -:   35:
        2:   36:TEST(AllocatorFixture, test0) {
        -:   37:    using allocator_type = My_Allocator<A, 1000>;
        -:   38:    using value_type     = typename allocator_type::value_type;
        -:   39:    using size_type      = typename allocator_type::size_type;
        -:   40:    using pointer        = typename allocator_type::pointer;
        -:   41:
        1:   42:    allocator_type  x;
        1:   43:    const size_type s = 2;
        1:   44:    const pointer   b = x.allocate(s);
        1:   45:    const pointer   e = b + s;
        -:   46:
        1:   47:    const value_type v = 0;
       1*:   48:    ASSERT_EQ(A::log, "A(int) ");
        -:   49:
        1:   50:    pointer p = b;
        3:   51:    while (p != e) {
        2:   52:        x.construct(p, v);
        2:   53:        ++p;}
       1*:   54:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ");
        -:   55:
       1*:   56:    ASSERT_EQ(count(b, e, v), ptrdiff_t(s));
       1*:   57:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ");
        -:   58:
        1:   59:    p = e;
        3:   60:    while (b != p) {
        2:   61:        --p;
        2:   62:        x.destroy(p);}
       1*:   63:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ~A() ~A() ");
        1:   64:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test0_Test8TestBodyEv:
        1:   36:TEST(AllocatorFixture, test0) {
        -:   37:    using allocator_type = My_Allocator<A, 1000>;
        -:   38:    using value_type     = typename allocator_type::value_type;
        -:   39:    using size_type      = typename allocator_type::size_type;
        -:   40:    using pointer        = typename allocator_type::pointer;
        -:   41:
        1:   42:    allocator_type  x;
        1:   43:    const size_type s = 2;
        1:   44:    const pointer   b = x.allocate(s);
        1:   45:    const pointer   e = b + s;
        -:   46:
        1:   47:    const value_type v = 0;
       1*:   48:    ASSERT_EQ(A::log, "A(int) ");
        -:   49:
        1:   50:    pointer p = b;
        3:   51:    while (p != e) {
        2:   52:        x.construct(p, v);
        2:   53:        ++p;}
       1*:   54:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ");
        -:   55:
       1*:   56:    ASSERT_EQ(count(b, e, v), ptrdiff_t(s));
       1*:   57:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ");
        -:   58:
        1:   59:    p = e;
        3:   60:    while (b != p) {
        2:   61:        --p;
        2:   62:        x.destroy(p);}
       1*:   63:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ~A() ~A() ");
        1:   64:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test0_TestC2Ev:
        1:   36:TEST(AllocatorFixture, test0) {
------------------
        -:   65:
        2:   66:TEST(AllocatorFixture, test1) {
        -:   67:    using allocator_type = My_Allocator<A, 1000>;
        -:   68:
        1:   69:    allocator_type x;        // read/write
       1*:   70:    ASSERT_EQ(x[  0], 992);
       1*:   71:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test1_Test8TestBodyEv:
        1:   66:TEST(AllocatorFixture, test1) {
        -:   67:    using allocator_type = My_Allocator<A, 1000>;
        -:   68:
        1:   69:    allocator_type x;        // read/write
       1*:   70:    ASSERT_EQ(x[  0], 992);
       1*:   71:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test1_TestC2Ev:
        1:   66:TEST(AllocatorFixture, test1) {
------------------
        -:   72:
        2:   73:TEST(AllocatorFixture, test2) {
        -:   74:    using allocator_type = My_Allocator<A, 1000>;
        -:   75:
        1:   76:    const allocator_type x;  // read-only
       1*:   77:    ASSERT_EQ(x[  0], 992);
       1*:   78:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test2_Test8TestBodyEv:
        1:   73:TEST(AllocatorFixture, test2) {
        -:   74:    using allocator_type = My_Allocator<A, 1000>;
        -:   75:
        1:   76:    const allocator_type x;  // read-only
       1*:   77:    ASSERT_EQ(x[  0], 992);
       1*:   78:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test2_TestC2Ev:
        1:   73:TEST(AllocatorFixture, test2) {
------------------
