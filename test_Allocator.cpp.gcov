        -:    0:Source:test_Allocator.cpp
        -:    0:Graph:test_Allocator.gcno
        -:    0:Data:test_Allocator.gcda
        -:    0:Runs:1
        -:    1:// -----------------
        -:    2:// TestAllocator.cpp
        -:    3:// -----------------
        -:    4:
        -:    5:// https://github.com/google/googletest
        -:    6:// https://github.com/google/googletest/blob/master/docs/reference/assertions.md
        -:    7:
        -:    8:// --------
        -:    9:// includes
        -:   10:// --------
        -:   11:
        -:   12:#include <algorithm> // count
        -:   13:#include <cstddef>   // ptrdiff_t
        -:   14:#include <string>    // string
        -:   15:
        -:   16:#include "gtest/gtest.h"
        -:   17:
        -:   18:#include "Allocator.hpp"
        -:   19:
        -:   20:using namespace std;
        -:   21:
        -:   22:struct A {
        2:   23:    friend bool operator == (const A&, const A&) {
        2:   24:        A::log += "==(A, A) ";
        2:   25:        return true;}
        -:   26:
        -:   27:    static string log;
        -:   28:
        -:   29:    A  ()         = default;
        2:   30:    A  (int)      {log += "A(int) ";}
        6:   31:    A  (const A&) {log += "A(A) ";}
        8:   32:    ~A ()         {log += "~A() ";}};
        -:   33:
        -:   34:string A::log;
        -:   35:
        2:   36:TEST(AllocatorFixture, test0) {
        -:   37:    using allocator_type = My_Allocator<A, 1000>;
        -:   38:    using value_type     = typename allocator_type::value_type;
        -:   39:    using size_type      = typename allocator_type::size_type;
        -:   40:    using pointer        = typename allocator_type::pointer;
        -:   41:
        1:   42:    allocator_type  x;
        1:   43:    const size_type s = 2;
        1:   44:    const pointer   b = x.allocate(s);
        1:   45:    const pointer   e = b + s;
        -:   46:
        1:   47:    const value_type v = 0;
       1*:   48:    ASSERT_EQ(A::log, "A(int) ");
        -:   49:
        1:   50:    pointer p = b;
        3:   51:    while (p != e) {
        2:   52:        x.construct(p, v);
        2:   53:        ++p;}
       1*:   54:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ");
        -:   55:
       1*:   56:    ASSERT_EQ(count(b, e, v), ptrdiff_t(s));
       1*:   57:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ");
        -:   58:
        1:   59:    p = e;
        3:   60:    while (b != p) {
        2:   61:        --p;
        2:   62:        x.destroy(p);}
       1*:   63:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ~A() ~A() ");
        1:   64:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test0_Test8TestBodyEv:
        1:   36:TEST(AllocatorFixture, test0) {
        -:   37:    using allocator_type = My_Allocator<A, 1000>;
        -:   38:    using value_type     = typename allocator_type::value_type;
        -:   39:    using size_type      = typename allocator_type::size_type;
        -:   40:    using pointer        = typename allocator_type::pointer;
        -:   41:
        1:   42:    allocator_type  x;
        1:   43:    const size_type s = 2;
        1:   44:    const pointer   b = x.allocate(s);
        1:   45:    const pointer   e = b + s;
        -:   46:
        1:   47:    const value_type v = 0;
       1*:   48:    ASSERT_EQ(A::log, "A(int) ");
        -:   49:
        1:   50:    pointer p = b;
        3:   51:    while (p != e) {
        2:   52:        x.construct(p, v);
        2:   53:        ++p;}
       1*:   54:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ");
        -:   55:
       1*:   56:    ASSERT_EQ(count(b, e, v), ptrdiff_t(s));
       1*:   57:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ");
        -:   58:
        1:   59:    p = e;
        3:   60:    while (b != p) {
        2:   61:        --p;
        2:   62:        x.destroy(p);}
       1*:   63:    ASSERT_EQ(A::log, "A(int) A(A) A(A) ==(A, A) ==(A, A) ~A() ~A() ");
        1:   64:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test0_TestC2Ev:
        1:   36:TEST(AllocatorFixture, test0) {
------------------
        -:   65:
        2:   66:TEST(AllocatorFixture, test1) {
        -:   67:    using allocator_type = My_Allocator<A, 1000>;
        -:   68:
        1:   69:    allocator_type x;        // read/write
       1*:   70:    ASSERT_EQ(x[  0], 992);
       1*:   71:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test1_Test8TestBodyEv:
        1:   66:TEST(AllocatorFixture, test1) {
        -:   67:    using allocator_type = My_Allocator<A, 1000>;
        -:   68:
        1:   69:    allocator_type x;        // read/write
       1*:   70:    ASSERT_EQ(x[  0], 992);
       1*:   71:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test1_TestC2Ev:
        1:   66:TEST(AllocatorFixture, test1) {
------------------
        -:   72:
        2:   73:TEST(AllocatorFixture, test2) {
        -:   74:    using allocator_type = My_Allocator<A, 1000>;
        -:   75:
        1:   76:    const allocator_type x;  // read-only
       1*:   77:    ASSERT_EQ(x[  0], 992);
       1*:   78:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test2_Test8TestBodyEv:
        1:   73:TEST(AllocatorFixture, test2) {
        -:   74:    using allocator_type = My_Allocator<A, 1000>;
        -:   75:
        1:   76:    const allocator_type x;  // read-only
       1*:   77:    ASSERT_EQ(x[  0], 992);
       1*:   78:    ASSERT_EQ(x[996], 992);}
------------------
_ZN27AllocatorFixture_test2_TestC2Ev:
        1:   73:TEST(AllocatorFixture, test2) {
------------------
        -:   79:
        2:   80:TEST(AllocatorFixture, test3) {
        1:   81:    A::log.clear(); // Clear the log before running the test
        -:   82:
        -:   83:    using allocator_type = My_Allocator<A, 1000>;
        -:   84:    using size_type      = typename allocator_type::size_type;
        -:   85:    using pointer        = typename allocator_type::pointer;
        -:   86:
        1:   87:    allocator_type  x;
        1:   88:    const size_type s = 4;
        1:   89:    const pointer   b = x.allocate(s);
        1:   90:    const pointer   e = b + s;
        -:   91:
        1:   92:    const A v = 0;
        1:   93:    pointer p = b;
        5:   94:    while (p != e) {
        4:   95:        x.construct(p, v);
        4:   96:        ++p;}
       1*:   97:    ASSERT_EQ(A::log, "A(int) A(A) A(A) A(A) A(A) ");
        -:   98:
        1:   99:    p = e;
        5:  100:    while (b != p) {
        4:  101:        --p;
        4:  102:        x.destroy(p);}
       1*:  103:    ASSERT_EQ(A::log, "A(int) A(A) A(A) A(A) A(A) ~A() ~A() ~A() ~A() ");
        1:  104:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test3_Test8TestBodyEv:
        1:   80:TEST(AllocatorFixture, test3) {
        1:   81:    A::log.clear(); // Clear the log before running the test
        -:   82:
        -:   83:    using allocator_type = My_Allocator<A, 1000>;
        -:   84:    using size_type      = typename allocator_type::size_type;
        -:   85:    using pointer        = typename allocator_type::pointer;
        -:   86:
        1:   87:    allocator_type  x;
        1:   88:    const size_type s = 4;
        1:   89:    const pointer   b = x.allocate(s);
        1:   90:    const pointer   e = b + s;
        -:   91:
        1:   92:    const A v = 0;
        1:   93:    pointer p = b;
        5:   94:    while (p != e) {
        4:   95:        x.construct(p, v);
        4:   96:        ++p;}
       1*:   97:    ASSERT_EQ(A::log, "A(int) A(A) A(A) A(A) A(A) ");
        -:   98:
        1:   99:    p = e;
        5:  100:    while (b != p) {
        4:  101:        --p;
        4:  102:        x.destroy(p);}
       1*:  103:    ASSERT_EQ(A::log, "A(int) A(A) A(A) A(A) A(A) ~A() ~A() ~A() ~A() ");
        1:  104:    x.deallocate(b, s);}
------------------
_ZN27AllocatorFixture_test3_TestC2Ev:
        1:   80:TEST(AllocatorFixture, test3) {
------------------
        -:  105:
        2:  106:TEST(AllocatorFixture, test4) {
        -:  107:    using allocator_type = My_Allocator<A, 1000>;
        -:  108:    using size_type      = typename allocator_type::size_type;
        -:  109:    using pointer        = typename allocator_type::pointer;
        -:  110:
        1:  111:    allocator_type  x;
        1:  112:    const size_type s1 = 2;
        1:  113:    const pointer   b1 = x.allocate(s1);
        1:  114:    const size_type s2 = 3;
        1:  115:    const pointer   b2 = x.allocate(s2);
        -:  116:
       1*:  117:    ASSERT_NE(b1, b2);
        -:  118:
        1:  119:    x.deallocate(b1, s1);
        1:  120:    x.deallocate(b2, s2);}
------------------
_ZN27AllocatorFixture_test4_Test8TestBodyEv:
        1:  106:TEST(AllocatorFixture, test4) {
        -:  107:    using allocator_type = My_Allocator<A, 1000>;
        -:  108:    using size_type      = typename allocator_type::size_type;
        -:  109:    using pointer        = typename allocator_type::pointer;
        -:  110:
        1:  111:    allocator_type  x;
        1:  112:    const size_type s1 = 2;
        1:  113:    const pointer   b1 = x.allocate(s1);
        1:  114:    const size_type s2 = 3;
        1:  115:    const pointer   b2 = x.allocate(s2);
        -:  116:
       1*:  117:    ASSERT_NE(b1, b2);
        -:  118:
        1:  119:    x.deallocate(b1, s1);
        1:  120:    x.deallocate(b2, s2);}
------------------
_ZN27AllocatorFixture_test4_TestC2Ev:
        1:  106:TEST(AllocatorFixture, test4) {
------------------
        -:  121:
        2:  122:TEST(AllocatorFixture, test5) {
        -:  123:    using allocator_type = My_Allocator<A, 1000>;
        -:  124:    using size_type      = typename allocator_type::size_type;
        -:  125:    using pointer        = typename allocator_type::pointer;
        -:  126:
        1:  127:    allocator_type  x;
        1:  128:    const size_type s1 = 2;
        1:  129:    const pointer   b1 = x.allocate(s1);
        1:  130:    const size_type s2 = 3;
        1:  131:    const pointer   b2 = x.allocate(s2);
        -:  132:
        1:  133:    x.deallocate(b1, s1);
        1:  134:    const pointer b3 = x.allocate(s1);
       1*:  135:    ASSERT_EQ(b1, b3);
        -:  136:
        1:  137:    x.deallocate(b2, s2);
        1:  138:    x.deallocate(b3, s1);}
------------------
_ZN27AllocatorFixture_test5_Test8TestBodyEv:
        1:  122:TEST(AllocatorFixture, test5) {
        -:  123:    using allocator_type = My_Allocator<A, 1000>;
        -:  124:    using size_type      = typename allocator_type::size_type;
        -:  125:    using pointer        = typename allocator_type::pointer;
        -:  126:
        1:  127:    allocator_type  x;
        1:  128:    const size_type s1 = 2;
        1:  129:    const pointer   b1 = x.allocate(s1);
        1:  130:    const size_type s2 = 3;
        1:  131:    const pointer   b2 = x.allocate(s2);
        -:  132:
        1:  133:    x.deallocate(b1, s1);
        1:  134:    const pointer b3 = x.allocate(s1);
       1*:  135:    ASSERT_EQ(b1, b3);
        -:  136:
        1:  137:    x.deallocate(b2, s2);
        1:  138:    x.deallocate(b3, s1);}
------------------
_ZN27AllocatorFixture_test5_TestC2Ev:
        1:  122:TEST(AllocatorFixture, test5) {
------------------
        -:  139:
        2:  140:TEST(AllocatorFixture, test6) {
        -:  141:    using allocator_type = My_Allocator<A, 1000>;
        -:  142:    using size_type      = typename allocator_type::size_type;
        -:  143:    using pointer        = typename allocator_type::pointer;
        -:  144:
        1:  145:    allocator_type  x;
        1:  146:    const size_type s1 = 2;
        1:  147:    const pointer   b1 = x.allocate(s1);
        1:  148:    const size_type s2 = 3;
        1:  149:    const pointer   b2 = x.allocate(s2);
        -:  150:
        1:  151:    x.deallocate(b2, s2);
        1:  152:    const pointer b3 = x.allocate(s2);
       1*:  153:    ASSERT_EQ(b2, b3);
        -:  154:
        1:  155:    x.deallocate(b1, s1);
        1:  156:    x.deallocate(b3, s2);}
------------------
_ZN27AllocatorFixture_test6_Test8TestBodyEv:
        1:  140:TEST(AllocatorFixture, test6) {
        -:  141:    using allocator_type = My_Allocator<A, 1000>;
        -:  142:    using size_type      = typename allocator_type::size_type;
        -:  143:    using pointer        = typename allocator_type::pointer;
        -:  144:
        1:  145:    allocator_type  x;
        1:  146:    const size_type s1 = 2;
        1:  147:    const pointer   b1 = x.allocate(s1);
        1:  148:    const size_type s2 = 3;
        1:  149:    const pointer   b2 = x.allocate(s2);
        -:  150:
        1:  151:    x.deallocate(b2, s2);
        1:  152:    const pointer b3 = x.allocate(s2);
       1*:  153:    ASSERT_EQ(b2, b3);
        -:  154:
        1:  155:    x.deallocate(b1, s1);
        1:  156:    x.deallocate(b3, s2);}
------------------
_ZN27AllocatorFixture_test6_TestC2Ev:
        1:  140:TEST(AllocatorFixture, test6) {
------------------
        -:  157:
        2:  158:TEST(AllocatorFixture, test7) {
        -:  159:    using allocator_type = My_Allocator<A, 1000>;
        -:  160:    using size_type      = typename allocator_type::size_type;
        -:  161:    using pointer        = typename allocator_type::pointer;
        -:  162:
        1:  163:    allocator_type  x;
        1:  164:    const size_type s1 = 2;
        1:  165:    const pointer   b1 = x.allocate(s1);
        1:  166:    const size_type s2 = 3;
        1:  167:    const pointer   b2 = x.allocate(s2);
        -:  168:
        1:  169:    x.deallocate(b1, s1);
        1:  170:    x.deallocate(b2, s2);
        -:  171:
        1:  172:    const pointer b3 = x.allocate(s1);
        1:  173:    const pointer b4 = x.allocate(s2);
       1*:  174:    ASSERT_EQ(b1, b3);
       1*:  175:    ASSERT_EQ(b2, b4);
        -:  176:
        1:  177:    x.deallocate(b3, s1);
        1:  178:    x.deallocate(b4, s2);}
------------------
_ZN27AllocatorFixture_test7_Test8TestBodyEv:
        1:  158:TEST(AllocatorFixture, test7) {
        -:  159:    using allocator_type = My_Allocator<A, 1000>;
        -:  160:    using size_type      = typename allocator_type::size_type;
        -:  161:    using pointer        = typename allocator_type::pointer;
        -:  162:
        1:  163:    allocator_type  x;
        1:  164:    const size_type s1 = 2;
        1:  165:    const pointer   b1 = x.allocate(s1);
        1:  166:    const size_type s2 = 3;
        1:  167:    const pointer   b2 = x.allocate(s2);
        -:  168:
        1:  169:    x.deallocate(b1, s1);
        1:  170:    x.deallocate(b2, s2);
        -:  171:
        1:  172:    const pointer b3 = x.allocate(s1);
        1:  173:    const pointer b4 = x.allocate(s2);
       1*:  174:    ASSERT_EQ(b1, b3);
       1*:  175:    ASSERT_EQ(b2, b4);
        -:  176:
        1:  177:    x.deallocate(b3, s1);
        1:  178:    x.deallocate(b4, s2);}
------------------
_ZN27AllocatorFixture_test7_TestC2Ev:
        1:  158:TEST(AllocatorFixture, test7) {
------------------
        -:  179:
        2:  180:TEST(AllocatorFixture, test8) {
        -:  181:    using allocator_type = My_Allocator<A, 1000>;
        -:  182:    using size_type      = typename allocator_type::size_type;
        -:  183:    using pointer        = typename allocator_type::pointer;
        -:  184:
        1:  185:    allocator_type  x;
        1:  186:    const size_type s1 = 2;
        1:  187:    const pointer   b1 = x.allocate(s1);
        1:  188:    const size_type s2 = 4;
        1:  189:    const pointer   b2 = x.allocate(s2);
        -:  190:
        -:  191:    // x.deallocate(b1, s1);
        1:  192:    x.deallocate(b2, s2);
        -:  193:
        1:  194:    const size_type s3 = 3;
        1:  195:    const pointer   b3 = x.allocate(s3);
        -:  196:    // const pointer   b4 = x.allocate(s1);
       1*:  197:    ASSERT_EQ(b2, b3); // b3 should reuse the block of b2
        -:  198:    // ASSERT_EQ(b1, b4); // b4 should reuse the block of b1
        -:  199:
        1:  200:    x.deallocate(b3, s3);
        1:  201:    x.deallocate(b1, s1);}
------------------
_ZN27AllocatorFixture_test8_Test8TestBodyEv:
        1:  180:TEST(AllocatorFixture, test8) {
        -:  181:    using allocator_type = My_Allocator<A, 1000>;
        -:  182:    using size_type      = typename allocator_type::size_type;
        -:  183:    using pointer        = typename allocator_type::pointer;
        -:  184:
        1:  185:    allocator_type  x;
        1:  186:    const size_type s1 = 2;
        1:  187:    const pointer   b1 = x.allocate(s1);
        1:  188:    const size_type s2 = 4;
        1:  189:    const pointer   b2 = x.allocate(s2);
        -:  190:
        -:  191:    // x.deallocate(b1, s1);
        1:  192:    x.deallocate(b2, s2);
        -:  193:
        1:  194:    const size_type s3 = 3;
        1:  195:    const pointer   b3 = x.allocate(s3);
        -:  196:    // const pointer   b4 = x.allocate(s1);
       1*:  197:    ASSERT_EQ(b2, b3); // b3 should reuse the block of b2
        -:  198:    // ASSERT_EQ(b1, b4); // b4 should reuse the block of b1
        -:  199:
        1:  200:    x.deallocate(b3, s3);
        1:  201:    x.deallocate(b1, s1);}
------------------
_ZN27AllocatorFixture_test8_TestC2Ev:
        1:  180:TEST(AllocatorFixture, test8) {
------------------
        -:  202:
        2:  203:TEST(AllocatorFixture, test9) {
        -:  204:    using allocator_type = My_Allocator<A, 1000>;
        -:  205:    using size_type      = typename allocator_type::size_type;
        -:  206:    using pointer        = typename allocator_type::pointer;
        -:  207:
        1:  208:    allocator_type  x;
        1:  209:    const size_type s1 = 2;
        1:  210:    const pointer   b1 = x.allocate(s1);
        1:  211:    const size_type s2 = 3;
        1:  212:    const pointer   b2 = x.allocate(s2);
        -:  213:
        1:  214:    x.deallocate(b1, s1);
        1:  215:    x.deallocate(b2, s2);
        -:  216:
        1:  217:    const pointer b3 = x.allocate(s1);
        1:  218:    const pointer b4 = x.allocate(s1);
       1*:  219:    ASSERT_EQ(b1, b3);
       1*:  220:    ASSERT_NE(b1, b4);
        -:  221:
        1:  222:    x.deallocate(b3, s1);
        1:  223:    x.deallocate(b4, s1);}
------------------
_ZN27AllocatorFixture_test9_Test8TestBodyEv:
        1:  203:TEST(AllocatorFixture, test9) {
        -:  204:    using allocator_type = My_Allocator<A, 1000>;
        -:  205:    using size_type      = typename allocator_type::size_type;
        -:  206:    using pointer        = typename allocator_type::pointer;
        -:  207:
        1:  208:    allocator_type  x;
        1:  209:    const size_type s1 = 2;
        1:  210:    const pointer   b1 = x.allocate(s1);
        1:  211:    const size_type s2 = 3;
        1:  212:    const pointer   b2 = x.allocate(s2);
        -:  213:
        1:  214:    x.deallocate(b1, s1);
        1:  215:    x.deallocate(b2, s2);
        -:  216:
        1:  217:    const pointer b3 = x.allocate(s1);
        1:  218:    const pointer b4 = x.allocate(s1);
       1*:  219:    ASSERT_EQ(b1, b3);
       1*:  220:    ASSERT_NE(b1, b4);
        -:  221:
        1:  222:    x.deallocate(b3, s1);
        1:  223:    x.deallocate(b4, s1);}
------------------
_ZN27AllocatorFixture_test9_TestC2Ev:
        1:  203:TEST(AllocatorFixture, test9) {
------------------
